name: Deploy to PyPI

on:
  release:
    types: [ published ]
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  CIBW_BUILD: cp3?-*
  CIBW_ARCHS_MACOS: "x86_64"
  CIBW_SKIP: "*-win32 *-manylinux_i686"
  CIBW_BUILD_VERBOSITY: 0
  CIBW_TEST_REQUIRES: qiskit-terra
  CIBW_TEST_COMMAND: "python -c \"from jkq import ddsim\""
  CIBW_BEFORE_BUILD: "pip install cmake"
  CIBW_BEFORE_BUILD_MACOS: "brew install libomp"

jobs:
  test_bindings:
    name: Test Python bindings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'
      - name: Install package
        run: |
          pip install -U pip setuptools wheel cmake
          pip install .
      - name: Test package
        run: |
          pip install pytest
          pip install -r requirements-test.txt
          pytest test/python

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Build sdist
        run: python setup.py sdist
      - name: Install sdist
        run: pip install --verbose dist/*.tar.gz
        env:
          CC: "gcc-10"
          CXX: "g++-10"
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [ test_bindings, build_sdist ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-10.14 ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.1
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  upload_pypi:
    name: Upload dists to PyPi
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
